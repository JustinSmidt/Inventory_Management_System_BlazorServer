@page "/editinventory/{InvId:int}"

@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase

@inject NavigationManager navigationManager

@inject IEditInventoryUseCase EditInventoryUseCase

@attribute [Authorize(Policy = "User")]

<h3>Edit Inventory</h3>

<br />
<EditForm Model="inventory" OnValidSubmit="SaveInventory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name" @bind-Value="inventory.InventoryName" class="form-control"></InputText>
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="inventory.Quantity" class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="inventory.Price" class="form-control"></InputNumber>
    </div>

    <br />

    <button type="submit" class="btn btn-primary">Save</button>

    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>

</EditForm>

@code {

    [Parameter]
    public int InvId{ get; set; }

    private Inventory inventory = new Inventory();

    protected override async Task OnParametersSetAsync()
    {
        this.inventory = await ViewInventoryByIdUseCase.ExecuteAsync(this.InvId);  //sets inventory = to retrieved Id from edit button click
    }                                                                              //and then sets that id record to inventory, which then populates the form with that Ids info

    public async Task SaveInventory()
    {
       await EditInventoryUseCase.ExecuteAsync(this.inventory);
       navigationManager.NavigateTo("/inventories");
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/inventories");
    }
}
