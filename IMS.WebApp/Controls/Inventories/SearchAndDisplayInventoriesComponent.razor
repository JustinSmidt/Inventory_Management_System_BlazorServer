<SearchInventoryComponent OnSearchInventory="OnSearchInventory" ></SearchInventoryComponent>

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

@if(_inventories.Count > 0)
{
    <div class="search-result">
        <ul>
            @foreach(var inv in _inventories)
            {
               <li @key="inv.InventoryId" @onclick="@(async() => {await OnSelectInventory(inv);})">@inv.InventoryName</li>
            }
        </ul>
    </div>
}

@code {
    private List<Inventory> _inventories = new List<Inventory>();

    [Parameter]
    public EventCallback<Inventory> OnInventorySelected { get; set; }   //to enable you to pass inventory to parent component (AddProduct)

    private async Task OnSearchInventory(string searchTerm)  //(input from searchbar)
    {
        _inventories = (await(ViewInventoriesByNameUseCase.ExecuteAsync(searchTerm))).ToList();
    }

    private async Task OnSelectInventory(Inventory inventory)
    {
        await OnInventorySelected.InvokeAsync(inventory);
        _inventories.Clear();     //to hide dropdown
    }
}
